package ${package};

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.context.ApplicationContextException;
import org.springframework.context.annotation.Primary;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.data.repository.core.support.RepositoryFactoryInformation;
import org.springframework.stereotype.Component;

/**
 * Spring Data Repository interfaces do not support the @{@link Primary} annotation, because @{@link Primary} annotations are not inherited,
 * and normally need to be annotated on implementation classes, however Spring Data Repository implementation classes are
 * automatically generated by Spring Data.
 *
 * <p>This {@link BeanFactoryPostProcessor} searches for all Spring Data implementation classes and registers them as primary beans
 * if their interface has the @{@link Primary} annotation.
 *
 * <p>This allows Spring Data Repository interfaces generated by {@code modgen} to be overridden using the @{@link Primary} annotation.
 */
@Component
@Slf4j
public class SpringDataPrimaryPostProcessor implements BeanFactoryPostProcessor {
  private static final String REPOSITORY_INTERFACE_PROPERTY = "repositoryInterface";

  @Override
  public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {
    makeRepositoriesPrimary(getRepositoryBeans(beanFactory));
  }

  protected List<BeanDefinition> getRepositoryBeans(ConfigurableListableBeanFactory beanFactory) {
    return Arrays.stream(beanFactory.getBeanDefinitionNames())
        .map(beanName -> {
          BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);
          String beanClassName = beanDefinition.getBeanClassName();
          if (beanClassName == null) {
            return null;
          }

          Class<?> beanClass;
          try {
            beanClass = Class.forName(beanClassName);
          } catch (ClassNotFoundException e) {
            throw new ApplicationContextException(String.format("Error when trying to get class: %s", beanClassName), e);
          }

          return isSpringDataJpaRepository(beanClass) ? beanDefinition : null;
        })
        .filter(Objects::nonNull)
        .collect(Collectors.toList());
  }

  protected void makeRepositoriesPrimary(List<BeanDefinition> repositoryBeanDefinitions) {
    repositoryBeanDefinitions.forEach(repositoryBeanDefinition -> {
      String repositoryInterface = (String) repositoryBeanDefinition.getPropertyValues().get(REPOSITORY_INTERFACE_PROPERTY);
      if (repositoryInterface != null && isPrimary(repositoryInterface)) {
        log.debug("Making repository bean primary, class: {}", repositoryInterface);
        repositoryBeanDefinition.setPrimary(true);
      }
    });
  }

  protected boolean isSpringDataJpaRepository(Class<?> beanClass) {
    return RepositoryFactoryInformation.class.isAssignableFrom(beanClass);
  }

  protected boolean isPrimary(String repositoryInterface) {
    return AnnotationUtils.findAnnotation(getClassSafely(repositoryInterface), Primary.class) != null;
  }

  protected Class<?> getClassSafely(String repositoryInterface) {
    try {
      return Class.forName(repositoryInterface);
    } catch (ClassNotFoundException e) {
      throw new ApplicationContextException(String.format("Error when trying to get class: %s", repositoryInterface), e);
    }
  }
}
