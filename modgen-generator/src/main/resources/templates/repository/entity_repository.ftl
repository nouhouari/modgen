<#assign aDateTime = .now>
<#assign aDate = aDateTime?date>
/*
 * Author   :	Nourreddine HOUARI <nourreddine.houari@>
 * 				Koneru, Venkaiah Chowdary <VenkaiahChowdary.Koneru@> 
 *
 * Date     : 	${aDate?string.medium} 
 * 
 * File     : 	${entity.name?cap_first}Controller.java 
 * 
 * Copyright (c) ${aDate?string.yyyy} houari_nourreddine Sdn Bhd, All rights reserved.                   
 */
 package ${package};

import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Component;

import com.datastax.driver.core.ResultSet;
import com.datastax.driver.mapping.Result;
import com.sicpa.gssd.metis.support.cassandra.AbstractCassandraRepository;

import ${entityPackage}.${entity.name?cap_first};


/**
 * THIS FILE IS AUTOMATICALLY GENERATED
 *     >> DO NOT EDIT MANUALLY <<
 * <br><br>
 * Generated by : ${generator}<br>
 * Version      : ${version}<br>
 * Date         : ${aDate?string.medium}<br>
 * <br>
 * @author Nourreddine HOUARI <nourreddine.houari@>
 * @author Koneru, Venkaiah Chowdary <VenkaiahChowdary.Koneru@>
 *
 */
@Component
public class ${entity.name?cap_first}Repository extends AbstractCassandraRepository<${entity.name?cap_first}, <#if primaryAttributes?size gt 1>Object[]<#else>${primaryAttributes[0].type}</#if>> {
    
    /**
     * 
     * @return number of objects
     */
    public long count(){
    	ResultSet execute = executeQuery("SELECT count(*) FROM ${entity.name?lower_case}"); 
    	return execute.one().getLong(0);
    }
    
    /**
     * Execute a CQL query and return a result set.
     * @param query
     * @return
     */
	public ResultSet executeQuery(String query) {
		ResultSet resultSet = getClient().getSession().execute(query);
		return resultSet;
	}
    
    /**
     * Execute a CQL query and return a list of ${entity.name?cap_first} objects.
     * @param cqlQuery
     * @return
     */
	public List<${entity.name?cap_first}> execute(String cqlQuery) {
		Result<${entity.name?cap_first}> map = getMapper().map(getClient().getSession().execute(cqlQuery));
		return map.all();
	}
    
    /**
	 * Buid Solr query with all search parameters.
	   <#list searchableAttributes as attribute>
			<#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double">
	 * @from${attribute.name?cap_first}
	 * @to${attribute.name?cap_first}
	 		<#elseif attribute.type = "String" && attribute.location>
	 * @${attribute.name?lower_case}Distance 
			</#if>
	 * @${attribute.name?lower_case}
			</#list>
     * @return Solr query.
	 */
	public String buildSolrQuery(
			int offset,
			<#list searchableAttributes as attribute>
			<#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double"|| attribute.type=="Date">
			${attribute.type} from${attribute.name?cap_first},
			${attribute.type} to${attribute.name?cap_first},
			<#elseif attribute.type = "String" && attribute.location>
			Double ${attribute.name?lower_case}Distance, 
			</#if>
			${attribute.type} ${attribute.name?lower_case}<#if attribute?has_next>, </#if>
			</#list>
			) {
		
		StringBuilder whereClause = new StringBuilder("solr_query='{\"q\":\"");
		StringBuilder locationClause = new StringBuilder();
		boolean first = true;
		
		<#list searchableAttributes as attribute>
		//Field ${attribute.name?lower_case}
		<#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double"|| attribute.type=="Date">
		if(from${attribute.name?cap_first} != null || to${attribute.name?cap_first} != null){
		  if(first){
		    first = false;
		  }else{
			whereClause.append(" AND");
		  }
		  String from = (from${attribute.name?cap_first} == null)?"*":from${attribute.name?cap_first}.toString();
		  String to   = (to${attribute.name?cap_first} == null)?"*":to${attribute.name?cap_first}.toString();
				
		  whereClause.append(" ${attribute.name?lower_case}:[ "+ from +" TO "+ to +" ]");
		}
		</#if>
		if(${attribute.name?lower_case} != null){
			if(first){
				first = false;
			}else{
				whereClause.append(" AND");
			}
			whereClause.append(" ${attribute.name?lower_case}:"+${attribute.name?lower_case});		
		}
		</#list>

		//Location attributes
		<#list searchableAttributes as attribute>
		<#if attribute.type = "String" && attribute.location>
		if(${attribute.name?lower_case} != null){
			locationClause.append(", \"fq\":\"{!geofilt sfield=${attribute.name?lower_case} pt="+${attribute.name?lower_case}+" d="+${attribute.name?lower_case}Distance+"}\"");
		}
		</#if>
		</#list>

		//No field selected
		if(first){
			whereClause.append("*:*");	
		}
		
		//Location filter
		whereClause.append(locationClause);
		
		//Pagination
		whereClause.append("\",\"start\":"+offset+"");
		
		whereClause.append("}");
		whereClause.append("'");
		
		return whereClause.toString();
	}  
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Class<${entity.name?cap_first}> getClazz() {
		return ${entity.name?cap_first}.class;
	}
}