/*
 * 
 * Nourreddine HOUARI CONFIDENTIAL
 * 
 * All information contained herein is, and remains
 * the property of Nourreddine HOUARI and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Nourreddine HOUARI
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Nourreddine HOUARI.
 * 
 * [2017] Nourreddine HOUARI SA
 * All Rights Reserved.
 */
 
//
// THIS FILE IS AUTOMATICALLY GENERATED
//     >> DO NOT EDIT MANUALLY <<
//
// @author Nourreddine HOUARI (nourreddine.houari@)
// Generated by : ${generator}
// Version      : ${version}
// Date         : ${today}
//
syntax = "proto3";

package ${package}.api.rpc;

option java_multiple_files = true;
option java_package = "${package}";
option java_outer_classname = "ModelProtoBuf";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
<#list entities as entity>
<#if entity.hasAnnotation("EXTENDABLE")>
import "google/protobuf/any.proto";
<#break> 
</#if>
</#list>

import "${package?replace('.','/')}/api/rpc/Page.proto";

<#function convertJavaToProtoType type>
   <#if type == "String">
    <#return "string">
   <#elseif type == "Date">
    <#return "int64">
   <#elseif type == "Byte">
    <#return "sint32">
   <#elseif type == "Short">
    <#return "sint32">
   <#elseif type == "Integer">
    <#return "sint32">
   <#elseif type == "Long">
    <#return "sint64">
   <#elseif type == "Float">
    <#return "float">
   <#elseif type == "Double">
    <#return "double">
   <#elseif type == "Boolean">
    <#return "bool">
   <#elseif type == "Character">
    <#return "int32">
   <#else>
    <#return type> 
   </#if>
  <#return "">
</#function>

<#list entities as entity>

 //////////////////
 // ${entity.name}
 //////////////////
<#list entity.getAttributesByAnnotation("PK") as attribute>
    <#if attribute.type == "Integer">
      <#assign primaryKey="google.protobuf.Int32Value">
    <#elseif attribute.type == "Long">
      <#assign primaryKey="google.protobuf.Int64Value">
     <#elseif attribute.type == "String">
      <#assign primaryKey="google.protobuf.StringValue">  
    </#if>  
</#list>

<#if entity.type == "CLASS">
  // Define ${entity.name} message
  message ${entity.name} {
<#list entity.attributes as attribute>
    <#assign index=attribute?index + 1>
	// ${attribute.type} ${attribute.name}
	<#if attribute.type == "String" 
	   || attribute.type == "Date" 
	   || attribute.type == "Byte" 
	   || attribute.type == "Short" 
	   || attribute.type == "Integer" 
	   || attribute.type == "Long"
	   || attribute.type == "Float"
	   || attribute.type == "Double"
	   || attribute.type == "Boolean"
	   || attribute.type == "Character">
	${convertJavaToProtoType(attribute.type)} ${attribute.name} = ${index};
	<#else>
	<#if attribute.reference || attribute.enumerate>
	 <#if attribute.multiplicity==1 && attribute.oppositeMultiplicity==1>
	${attribute.type} ${attribute.name} = ${index};
	 <#elseif attribute.multiplicity==-1>
	// ${attribute.type} ${attribute.name}
	repeated ${attribute.type} ${attribute.name} = ${index};
	 </#if>
	<#else>
	// Unkwon type for attribute ${attribute.name} of type ${attribute.type}
	</#if>
	</#if>
</#list>
    <#if entity.hasAnnotation("AUDIT_AWARE")>
    <#assign index=index+1>
    // Creation date
    int64 createdDate = ${index};
    <#assign index=index+1>
    // Last modification date
    int64 modifiedDate = ${index};
    <#assign index=index+1>
    // Create by user
    string createdBy = ${index};
    <#assign index=index+1>
    // Last modification user
    string modifiedBy = ${index};
    <#assign index=index+1>
    <#if entity.hasAnnotation("VERSIONABLE")>
    // Version
    int64 version = ${index}; 
    </#if>
    <#else>
    <#if entity.hasAnnotation("VERSIONABLE")>
    // Version
    int64 version = ${index+1}; 
    </#if>
    </#if>
    
    <#if entity.hasAnnotation("EXTENDABLE")>
    // Fully qualified name of the matching schema type/version
    <#assign index=index+1>
  	string schema_fully_qualified_name = ${index+1}; 

  	// All the custom fields are stored in this extensions field.
  	<#assign index=index+1>
  	google.protobuf.Any extension_fields = ${index+1}; 
    </#if>
    
  }
  
  
  /*
   * Result save response with status and validation map.
   */
  message ${entity.name}SaveResult {
    enum ${entity.name}SaveStatusEnum {
      SUCCESS = 0;
      FAILURE = 1;
      EXCEPTION = 3;
    }
    ${entity.name}SaveStatusEnum status = 1; // one of the enums from the above status. Default is SUCCESS.
    ${entity.name} entityProto = 2; // request object that is received
    map<string, string> errors = 3; // a key-value pair of errors with property names as keys and corresponding error codes as values.
  }

  /*
   * Define the query parameters for a ${entity.name}
   * entity.
   */
  message ${entity.name}Query {
     string sortParams = 1;
   <#assign queryIndex=2>
   <#list entity.getAttributesByAnnotation("QUERY") as attribute>
    <#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double"|| attribute.type=="Date">
     ${convertJavaToProtoType(attribute.type)} from${attribute.name?cap_first} = ${queryIndex};
     ${convertJavaToProtoType(attribute.type)} to${attribute.name?cap_first} = ${queryIndex+1};
     <#assign queryIndex=queryIndex+2>
    </#if>
     ${convertJavaToProtoType(attribute.type)} ${attribute.name?uncap_first} = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
   </#list>
   <#list entity.relations as relation>
     <#list relation.model.getAttributesByAnnotation("PK") as primaryAttribute>
     ${convertJavaToProtoType(primaryAttribute.type)} ${relation.model.name?uncap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first} = ${queryIndex};
     <#assign queryIndex=queryIndex+1>   
     </#list>
   </#list>
   <#if entity.hasAnnotation("AUDIT_AWARE")>
     // Creation date
     int64 createdDate = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     int64 fromCreatedDate = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     int64 toCreatedDate = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     // Last modification date
     int64 modifiedDate = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     int64 fromModifiedDate = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     int64 toModifiedDate = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     // Create by user
     string createdBy = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     // Last modification user
     string modifiedBy = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     </#if>
     <#list entity.attributes as attribute>
     <#if attribute.reference>
     <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
     // Query from ${primaryAttribute.type} ${attribute.name} reference.
     ${convertJavaToProtoType(primaryAttribute.type)} ${attribute.name?uncap_first}${primaryAttribute.name?cap_first} = ${queryIndex};
     <#assign queryIndex=queryIndex+1>
     </#list>
     </#if>
     </#list>  
  }
  
  /*
   * Define the quick query for a ${entity.name}
   * entity.
   */
  message ${entity.name}QuickSearchQuery {
    string quickSearchQuery = 1;
    string sortParams = 2;
    <#assign queryIndex=3>
   <#list entity.getAttributesByAnnotation("QUERY") as attribute>
    <#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double"|| attribute.type=="Date">
     ${convertJavaToProtoType(attribute.type)} from${attribute.name?cap_first} = ${queryIndex};
     ${convertJavaToProtoType(attribute.type)} to${attribute.name?cap_first} = ${queryIndex+1};
     <#assign queryIndex=queryIndex+3>
    </#if>
     ${convertJavaToProtoType(attribute.type)} ${attribute.name?uncap_first} = ${queryIndex};
     <#assign queryIndex=queryIndex+2>
   </#list>
   <#list entity.relations as relation>
     <#list relation.model.getAttributesByAnnotation("PK") as primaryAttribute>
     ${convertJavaToProtoType(primaryAttribute.type)} ${relation.model.name?uncap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first} = ${queryIndex};
     <#assign queryIndex=queryIndex+1>   
     </#list>
   </#list>
  }
  
  /*
   * ${entity.name} result page that contains the result of 
   * a request.
   */
  message ${entity.name}ResultPage{
    // Amount of elements
    uint32 totalElements  = 1;
    // Number of current page
    uint32 number  = 2;
    // Number of elements in the current page
    uint64 numberOfElements = 3;
    // Page size
    uint64 size = 4;
    // Total number of pages
    uint64 totalPages = 5;
    // Element list
    repeated ${entity.name} entities = 6;
  }
  
  /*
   * Request that contains the pagination information and
   * the query parameters.
   */
   message ${entity.name}Request {
     Page page = 1;
     ${entity.name}Query query = 2;
   }
   
  /*
   * Request that contains the pagination information and
   * the query parameters for a quick search.
   */
   message ${entity.name}QuickSearchRequest {
     Page page = 1;
     ${entity.name}QuickSearchQuery query = 2;
   }
     
   /*
    * Entities list
    */ 
   message ${entity.name}List {
    repeated ${entity.name} entities = 1;
   }
   
   <#list entity.attributes as attribute>
      <#if attribute.reference>
   /*
    * Message to request a link between ${entity.name} and a ${attribute.name} of type  ${attribute.type}
    */   
   message Link${entity.name}To${attribute.name?cap_first}Request {
     <#assign index=1>
     <#list entity.getAttributesByAnnotation("PK") as primaryAttribute>
     ${convertJavaToProtoType(primaryAttribute.type)} ${primaryAttribute.name} = ${index};
     <#assign index=index+1>
     </#list>
     <#list attribute.model.getAttributesByAnnotation("PK") as linkedPrimaryAttribute>
     ${convertJavaToProtoType(linkedPrimaryAttribute.type)} ${attribute.name}_${linkedPrimaryAttribute.name} = ${index};
     <#assign index=index+1>
     </#list> 
   }
   
   /*
    * Message to create alink a ${entity.name} and a ${attribute.name} of type  ${attribute.type}
    */   
   message AddLink${entity.name}To${attribute.name?cap_first}Request {
     // link : true for add
     // link : false for remove
     bool link = 1;
     <#assign index=2>
     <#list entity.getAttributesByAnnotation("PK") as primaryAttribute>
     ${convertJavaToProtoType(primaryAttribute.type)} ${primaryAttribute.name} = ${index};
     <#assign index=index+1>
     </#list>
     <#list attribute.model.getAttributesByAnnotation("PK") as linkedPrimaryAttribute>
     ${convertJavaToProtoType(linkedPrimaryAttribute.type)} ${attribute.name}_${linkedPrimaryAttribute.name} = ${index};
     <#assign index=index+1>
     </#list> 
   }      
      </#if>
    </#list>
    
   <#list entity.relations as relation>
   /* 
    * Find by ${relation.model.name} request. 
    */
   message ${entity.name}By${relation.model.name}${relation.relationName?cap_first}Request {
     Page page = 1;
     <#list relation.model.getAttributesByAnnotation("PK") as primaryAttribute>
     ${convertJavaToProtoType(primaryAttribute.type)} ${primaryAttribute.name} = ${primaryAttribute?index+2};    
     </#list>
   }
   </#list>              

  // CRUD and Search services
  service ${entity.name}CRUDServices{
    
    // Create ${entity.name}
    // @param  : ${entity.name?lower_case} to create.
    // @return : the created ${entity.name?lower_case} or ALREADY_EXISTS
    rpc Save${entity.name}(${entity.name}) returns (${entity.name}SaveResult);

    // Read ${entity.name} by id
    // @param  : ${entity.name?lower_case} id to read.
    // @return : the ${entity.name?lower_case} or NOT_FOUND
    rpc Read${entity.name}(${primaryKey}) returns (${entity.name});
    
    // Update ${entity.name}
    // @param  : ${entity.name?lower_case} to update.
    // @return : the updated ${entity.name?lower_case} or NOT_FOUND
    rpc Update${entity.name} (${entity.name}) returns (${entity.name});
    
    // Delete ${entity.name} by id
    // @param  : ${entity.name?lower_case} id to delete.
    // @return : empty message or NOT_FOUND
    rpc Delete${entity.name}(${primaryKey}) returns (google.protobuf.Empty);
    
    // Get all ${entity.name} 
    // @param  : ${entity.name}Request search request.
    // @return : list of ${entity.name}
    rpc GetAll${entity.name}(${entity.name}Request) returns (${entity.name}ResultPage);
    
    // Get all entities
    // @param : No param
    // @return : list of ${entity.name}
    rpc GetAll${entity.name}s(google.protobuf.Empty) returns (${entity.name}List);
    
    // Quick search ${entity.name} 
    // @param  : ${entity.name}QuickSearchRequest quick search request.
    // @return : list of ${entity.name} that match the query
    rpc QuickSearch${entity.name}(${entity.name}QuickSearchRequest) returns (${entity.name}ResultPage);
    
    // Count entities
    // @param : No param
    // @return : number of ${entity.name}
    rpc Count${entity.name}(google.protobuf.Empty) returns (google.protobuf.Int64Value);
    
    <#list entity.attributes as attribute>
      <#if attribute.reference>
      // ${attribute.multiplicity}
        <#if attribute.multiplicity=1>
    // Set ${attribute.name} relation
    // @param : Link${attribute.name?cap_first}Request
    // @return : number of ${entity.name}
    rpc Link${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request) returns (${entity.name});
    
        <#else>
    // Add ${attribute.type?cap_first} to ${attribute.name?cap_first} list
    // @param : Link${attribute.name?cap_first}Request
    // @return : empty
    rpc Add${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request) returns (${entity.name}SaveResult);
    
    // Remove ${attribute.type?cap_first} from ${attribute.name?cap_first} list
    // @param : Link${attribute.name?cap_first}Request
    // @return : empty
    rpc Remove${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request) returns (${entity.name}SaveResult);
    
        </#if>   
      </#if>
    </#list>
  }
  
<#elseif entity.type == "ENUM">	
  // Enum
  enum ${entity.name} {
  ${entity.name?upper_case}_UNDEFINED = 0;
  <#list entity.attributes as attribute>
  ${attribute.name} = ${attribute?index+1};
  </#list>
  }
  
</#if>
</#list>
