<#macro underlinesToCamelCase inString><#local strArray = inString?split("_")><#list strArray as item><#if item?index == 0>${item}<#else>${item?cap_first}</#if></#list></#macro>
<#assign aDateTime = .now>
<#assign aDate = aDateTime?date>

/*
 *
 * Nourreddine HOUARI CONFIDENTIAL
 *
 * All information contained herein is, and remains
 * the property of Nourreddine HOUARI and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Nourreddine HOUARI
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Nourreddine HOUARI.
 *
 * [2017] Nourreddine HOUARI SA
 * All Rights Reserved.
 */

 package ${package};

import com.google.protobuf.Empty;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import rx.Observable;
import com.hin.ptf.grpc.support.GrpcRxServer;
import io.grpc.BindableService;
import io.grpc.stub.StreamObserver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Date;
import javax.annotation.security.RolesAllowed;

import ${protoPackage}.${entity.name?cap_first};
import ${protoPackage}.${entity.name?cap_first}SaveResult;
import ${protoPackage}.${entity.name?cap_first}List;
<#list entity.attributes as attribute>
<#if attribute.reference>
import ${protoPackage}.Link${entity.name}To${attribute.name?cap_first}Request;
</#if>
</#list>
<#list entity.relations as relation>
import ${protoPackage}.${entity.name}By${relation.model.name}${relation.relationName?cap_first}Request;
</#list>
import ${protoPackage}.${entity.name?cap_first}CRUDServicesGrpc;
import ${protoPackage}.${entity.name?cap_first}Request;
import ${protoPackage}.${entity.name?cap_first}Query;
import ${protoPackage}.${entity.name?cap_first}QuickSearchQuery;
import ${protoPackage}.${entity.name?cap_first}QuickSearchRequest;
import ${protoPackage}.${entity.name?cap_first}ResultPage;
import ${protoPackage}.${entity.name?cap_first}ResultPage.Builder;
import ${servicePackage}.${entity.name?cap_first}Service;
import ${servicePackage}.ResultPage;
import ${rolePackage}.${entity.name?cap_first}Roles;

<#list primaryAttributes as attribute>
    <#if attribute.type == "Integer">
      <#assign primaryKey="com.google.protobuf.Int32Value">
    <#elseif attribute.type == "Long">
      <#assign primaryKey="com.google.protobuf.Int64Value">
     <#elseif attribute.type == "String">
      <#assign primaryKey="com.google.protobuf.StringValue">  
    </#if>  
</#list>

/**
 * THIS FILE IS AUTOMATICALLY GENERATED
 *     >> DO NOT EDIT MANUALLY <<
 * <br><br>
 * Generated by : ${generator}<br>
 * Version      : ${version}<br>
 * Date         : ${aDate?string.medium}<br>
 * <br>
 * @author Nourreddine HOUARI <nourreddine.houari@>
 *
 */
@Component
public class ${entity.name?cap_first}GrpcServiceImpl {

  private static final Logger LOGGER = LoggerFactory.getLogger(${entity.name?cap_first}GrpcServiceImpl.class);

  @Autowired
  private ${entity.name?cap_first}Service service;

  /**
   * Save ${entity.name?cap_first}.
   * @param ${entity.name?cap_first}Proto ${entity.name?lower_case} to save.
   * @return ${entity.name?cap_first}Proto saved entity.
   */
  @RolesAllowed(${entity.name?cap_first}Roles.SAVE_${entity.name?upper_case})
  public Observable<${entity.name?cap_first}SaveResult> save(${entity.name?cap_first} ${entity.name?cap_first}Proto) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info("Server saving : " + ${entity.name?cap_first}Proto);
    }
    Observable<${entity.name?cap_first}SaveResult> result = Observable.create(s -> {
      ${entity.name?cap_first}SaveResult saved${entity.name?cap_first}Result = this.service.save(${entity.name?cap_first}Proto);
      // Return the proto
      s.onNext(saved${entity.name?cap_first}Result);
      s.onCompleted();
    });
    return result;
    
  }
   
  /**
   * Count the number of entities.
   * @return
   */
  @RolesAllowed(${entity.name?cap_first}Roles.COUNT_${entity.name?upper_case}) 
  public Observable<Int64Value> count(Empty e) {
      return Observable.create( s-> {
        s.onNext(Int64Value.newBuilder().setValue(service.count()).build());
        s.onCompleted();
      });
  }

  /**
   * Get a ${entity.name?cap_first} by the primary key.
   */
  @RolesAllowed(${entity.name?cap_first}Roles.READ_${entity.name?upper_case}) 
  public Observable<${entity.name?cap_first}> getByPrimaryKey(${primaryKey} id) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info("Server retrieve ${entity.name?cap_first}${entity_suffix} with id : " + id);
    }
    return Observable.create(s -> {
      ${entity.name?cap_first} value = service.getByPrimaryKey(id.getValue());
      // Return the proto
      s.onNext(value);
      s.onCompleted();
    });
  }

  /**
   * Delete ${entity.name?cap_first}.
   */
  @RolesAllowed(${entity.name?cap_first}Roles.DELETE_${entity.name?upper_case}) 
  public Observable<Empty> delete(${primaryKey} id) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info("Server delete ${entity.name?cap_first}Entity with id : " + id);
    }
    return Observable.create(s -> {
      service.delete(id.getValue());
      s.onNext(Empty.newBuilder().build());
      s.onCompleted();
    });
  }

  /**
   * Look for a ${entity.name?cap_first} using the request parameters.
   * @return Page of ${entity.name?cap_first}.
   */
  @RolesAllowed(${entity.name?cap_first}Roles.SEARCH_${entity.name?upper_case}) 
  public Observable<${entity.name?cap_first}ResultPage> getAll${entity.name?cap_first}(${entity.name?cap_first}Request request) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info("Server get all ${entity.name?cap_first}Entity page: " + request.getPage().getPage() + " size:" + request.getPage().getSize());
    }
    return Observable.create(s -> {
      
      ${entity.name?cap_first}Query.Builder builder = request.getQuery().toBuilder();
      ResultPage<${entity.name?cap_first}> findAll = service.queryResult(
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("sortParams")))?request.getQuery().getSortParams():null,
        request.getPage().getPage(), 
        (int)request.getPage().getSize()
        <#if entity.hasAnnotation("AUDIT_AWARE")>
        ,(builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("createdBy")))?request.getQuery().getCreatedBy():null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("createdDate")))?new Date(request.getQuery().getCreatedDate()):null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("fromCreatedDate")))?new Date(request.getQuery().getFromCreatedDate()):null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("toCreatedDate")))?new Date(request.getQuery().getToCreatedDate()):null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("modifiedBy")))?request.getQuery().getModifiedBy():null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("modifiedDate")))?new Date(request.getQuery().getModifiedDate()):null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("fromModifiedDate")))?new Date(request.getQuery().getFromModifiedDate()):null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("toModifiedDate")))?new Date(request.getQuery().getToModifiedDate()):null
        </#if>
        <#if searchableAttributes?size gt 0>,</#if>
        <#list searchableAttributes as attribute>
        <#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double">
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("from${attribute.name?cap_first}")))?request.getQuery().getFrom${attribute.name?cap_first}():null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("to${attribute.name?cap_first}")))?request.getQuery().getTo${attribute.name?cap_first}():null,
        <#elseif attribute.type=="Date">
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("from${attribute.name?cap_first}")))?new Date(request.getQuery().getFrom${attribute.name?cap_first}()):null,
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("to${attribute.name?cap_first}")))?new Date(request.getQuery().getTo${attribute.name?cap_first}()):null,
        </#if>
        <#if attribute.enumerate>
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("${attribute.name?uncap_first}")))?${entityPackage}.${attribute.type}.valueOf(request.getQuery().get${attribute.name?cap_first}().toString()):null<#if attribute?has_next>,</#if>
        <#else>
        <#if attribute.type=="Date">
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("${attribute.name?uncap_first}")))?new Date(request.getQuery().get${attribute.name?cap_first}()):null<#if attribute?has_next>,</#if>
        <#else>
        (builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("${attribute.name?uncap_first}")))?request.getQuery().get${attribute.name?cap_first}():null<#if attribute?has_next>,</#if>
        </#if>
        </#if>
        </#list>
        <#list entity.relations as relation>
        <#list relation.model.getAttributesByAnnotation("PK") as primaryAttribute>
        ,(builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("${relation.model.name?uncap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first}")))?request.getQuery().get${relation.model.name?cap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first}():null
        </#list>
        </#list>
        <#list entity.attributes as attribute>
        <#if attribute.reference>
        <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
        // Query from ${primaryAttribute.type} ${attribute.name} reference.
        ,(builder.hasField(${entity.name?cap_first}Query.Builder.getDescriptor().findFieldByName("${attribute.name?uncap_first}${primaryAttribute.name?cap_first}")))?request.getQuery().get${attribute.name?cap_first}${primaryAttribute.name?cap_first}():null
        </#list>
        </#if>
        </#list>);
      
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug("Repository search ${entity.name?cap_first} : " + findAll);
      }
      
      Builder result = ${entity.name?cap_first}ResultPage.newBuilder();
      result.setTotalElements(findAll.getTotalElements());
      result.setNumber(findAll.getNumber());
      result.setNumberOfElements(findAll.getNumberOfElements());
      result.setSize(findAll.getSize());
      result.setTotalPages(findAll.getTotalPages());
      result.addAllEntities(findAll.getList());
      s.onNext(result.build());
      s.onCompleted();
    });
  }
  
  /**
   * Get all the ${entity.name?cap_first} as a list.
   */
  @RolesAllowed(${entity.name?cap_first}Roles.LIST_${entity.name?upper_case}) 
  public Observable<${entity.name?cap_first}List> getAll${entity.name?cap_first}s(Empty e){
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info("Server get all ${entity.name?cap_first}${entity_suffix}");
    }
    return Observable.create(s -> {
      List<${entity.name?cap_first}> all${entity.name?cap_first}s = service.getAll${entity.name?cap_first}s();
      ${entity.name?cap_first}List list = ${entity.name?cap_first}List.newBuilder().addAllEntities(all${entity.name?cap_first}s).build();
      s.onNext(list);
      s.onCompleted();
    });
  }

  /**
   * Quick search service.
   * @param request quick search request.
   * @return Page of ${entity.name?cap_first}
   */
  @RolesAllowed(${entity.name?cap_first}Roles.SEARCH_${entity.name?upper_case}) 
  public Observable<${entity.name?cap_first}ResultPage> quickSearch(${entity.name?cap_first}QuickSearchRequest request) {

    return Observable.create(s -> {
      ${entity.name?cap_first}QuickSearchQuery.Builder builder = request.getQuery().toBuilder();
      ResultPage<${entity.name?cap_first}> findAll = service.quickSearch(request.getQuery().getQuickSearchQuery(), request.getPage().getPage(),
          (int)request.getPage().getSize(),
          (builder.hasField(builder.getDescriptor().findFieldByName("sortParams"))) ? request.getQuery().getSortParams() : null
        <#if searchableAttributes?size gt 0>,</#if>
        <#list searchableAttributes as attribute>
        <#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double">
        (builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("from${attribute.name?cap_first}")))?request.getQuery().getFrom${attribute.name?cap_first}():null,
        (builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("to${attribute.name?cap_first}")))?request.getQuery().getTo${attribute.name?cap_first}():null,
        <#elseif attribute.type=="Date">
        (builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("from${attribute.name?cap_first}")))?new Date(request.getQuery().getFrom${attribute.name?cap_first}()):null,
        (builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("to${attribute.name?cap_first}")))?new Date(request.getQuery().getTo${attribute.name?cap_first}()):null,
        </#if>
        <#if attribute.enumerate>
        (builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("${attribute.name?uncap_first}")))?${entityPackage}.${attribute.type}.valueOf(request.getQuery().get${attribute.name?cap_first}().toString()):null<#if attribute?has_next>,</#if>
        <#else>
        <#if attribute.type=="Date">
        (builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("${attribute.name?uncap_first}")))?new Date(request.getQuery().get${attribute.name?cap_first}()):null<#if attribute?has_next>,</#if>
        <#else>
        (builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("${attribute.name?uncap_first}")))?request.getQuery().get${attribute.name?cap_first}():null<#if attribute?has_next>,</#if>
        </#if>
        </#if>
        </#list>
        <#list entity.relations as relation>
        <#list relation.model.getAttributesByAnnotation("PK") as primaryAttribute>
        ,(builder.hasField(${entity.name?cap_first}QuickSearchQuery.Builder.getDescriptor().findFieldByName("${relation.model.name?uncap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first}")))?request.getQuery().get${relation.model.name?cap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first}():null
        </#list>
        </#list>);

      Builder result = ${entity.name?cap_first}ResultPage.newBuilder();
      result.setTotalElements(findAll.getTotalElements());
      result.setNumber(findAll.getNumber());
      result.setNumberOfElements(findAll.getNumberOfElements());
      result.setSize(findAll.getSize());
      result.setTotalPages(findAll.getTotalPages());
      result.addAllEntities(findAll.getList());
      s.onNext(result.build());
      s.onCompleted();
    });
  }
  
  <#list entity.attributes as attribute>
    <#if attribute.reference && attribute.multiplicity=1>
  /**
   * Link a ${entity.name?cap_first} and its ${attribute.name}.
   * @param link${attribute.name?cap_first}Request Request that contains the primary keys of linked entities.
   * @return Observable ${entity.name?cap_first}
   */
  public Observable<${entity.name?cap_first}> link${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request link${attribute.name?cap_first}Request){
    <#assign relationPrimaryAttribute="">
    <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
        <#assign relationPrimaryAttribute=primaryAttribute.name>
    </#list>
    return Observable.create(s -> {
      ${entity.name?cap_first} value = service.set${attribute.name?cap_first}Relation(<#list primaryAttributes as primaryAttribute>link${attribute.name?cap_first}Request.get${primaryAttribute.name?cap_first}()<#sep>,</#sep></#list>, link${attribute.name?cap_first}Request.get${attribute.name?cap_first}${relationPrimaryAttribute?cap_first}());
      // Return the proto
      s.onNext(value);
      s.onCompleted();
    });
  }
  <#elseif attribute.reference && attribute.multiplicity=-1>
  /**
   * Add a ${entity.name?cap_first} and its ${attribute.name}.
   * @param add${attribute.name?cap_first}Request Request that contains the primary keys of linked entities.
   * @return Observable Empty
   */
  public Observable<${entity.name?cap_first}SaveResult> add${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request add${attribute.name?cap_first}Request){
    <#assign relationPrimaryAttribute="">
    <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
        <#assign relationPrimaryAttribute=primaryAttribute.name>
    </#list>
    return Observable.create(s -> {
      ${entity.name?cap_first}SaveResult savedResult = service.add${attribute.name?cap_first}Relation(<#list primaryAttributes as primaryAttribute>add${attribute.name?cap_first}Request.get${primaryAttribute.name?cap_first}()<#sep>,</#sep></#list>, add${attribute.name?cap_first}Request.get${attribute.name?cap_first}${relationPrimaryAttribute?cap_first}());
      // Return the proto
      s.onNext(savedResult);
      s.onCompleted();
    });
  }
  
  /**
   * Remove a ${entity.name?cap_first} and its ${attribute.name}.
   * @param remove${attribute.name?cap_first}Request Request that contains the primary keys of linked entities.
   * @return Observable Empty
   */
  @RolesAllowed(${entity.name?cap_first}Roles.SEARCH_${entity.name?upper_case})  
  public Observable<${entity.name?cap_first}SaveResult> remove${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request remove${attribute.name?cap_first}Request){
    <#assign relationPrimaryAttribute="">
    <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
        <#assign relationPrimaryAttribute=primaryAttribute.name>
    </#list>
    return Observable.create(s -> {
      ${entity.name?cap_first}SaveResult savedResult = service.remove${attribute.name?cap_first}Relation(<#list primaryAttributes as primaryAttribute>remove${attribute.name?cap_first}Request.get${primaryAttribute.name?cap_first}()<#sep>,</#sep></#list>, remove${attribute.name?cap_first}Request.get${attribute.name?cap_first}${relationPrimaryAttribute?cap_first}());
      // Return the proto
      s.onNext(savedResult);
      s.onCompleted();
    });
  }
  </#if>
  </#list>
  
  /**
   * Bind all method to the gRPC client stub.
   */
  public static BindableService bind(${entity.name?cap_first}GrpcServiceImpl service) {
    // Create a new gRPC service that will call the RxJava service.
    return new ${entity.name?cap_first}CRUDServicesGrpc.${entity.name?cap_first}CRUDServicesImplBase() {

      @Override
      public void save${entity.name?cap_first}(${entity.name?cap_first} request, StreamObserver<${entity.name?cap_first}SaveResult> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::save);
      }

      @Override
      public void read${entity.name?cap_first}(${primaryKey} request, StreamObserver<${entity.name?cap_first}> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::getByPrimaryKey);
      }

      @Override
      public void delete${entity.name?cap_first}(${primaryKey} request, StreamObserver<Empty> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::delete);
      }

      @Override
      public void getAll${entity.name?cap_first}(${entity.name?cap_first}Request request, StreamObserver<${entity.name?cap_first}ResultPage> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::getAll${entity.name?cap_first});
      }
      
      @Override
      public void getAll${entity.name?cap_first}s(Empty request, StreamObserver<${entity.name?cap_first}List> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::getAll${entity.name?cap_first}s);
      }
      
      @Override
      public void count${entity.name?cap_first}(Empty request, StreamObserver<Int64Value> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::count);
      }

      @Override
      public void quickSearch${entity.name?cap_first}(${entity.name?cap_first}QuickSearchRequest request, StreamObserver<${entity.name?cap_first}ResultPage> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::quickSearch);
      }
      
      <#list entity.attributes as attribute>
       <#if attribute.reference && attribute.multiplicity=1>
      @Override
      public void link${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request request, StreamObserver<${entity.name?cap_first}> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::link${attribute.name?cap_first});
      }
       
      <#elseif attribute.reference && attribute.multiplicity=-1>
      @Override
      public void add${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request request, StreamObserver<${entity.name?cap_first}SaveResult> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::add${attribute.name?cap_first});
      }
      
      @Override
      public void remove${attribute.name?cap_first}(Link${entity.name}To${attribute.name?cap_first}Request request, StreamObserver<${entity.name?cap_first}SaveResult> responseObserver) {
        GrpcRxServer.serverSideStreaming(request, responseObserver, service::remove${attribute.name?cap_first});
      }
      
      </#if>
      </#list>
    };
  }
}
