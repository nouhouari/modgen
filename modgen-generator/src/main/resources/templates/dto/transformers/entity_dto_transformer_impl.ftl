<#macro underlinesToCamelCase inString><#local strArray = inString?split("_")><#list strArray as item><#if item?index == 0>${item}<#else>${item?cap_first}</#if></#list></#macro>
<#assign aDateTime = .now>
<#assign aDate = aDateTime?date>
<#assign hasGeometry=false>
<#list entity.attributes as attribute>
 <#if attribute.type=="String" && attribute.hasAnnotation("GEOMETRY")>
  <#assign hasGeometry=true>
  <#break>
 </#if>
</#list>

/*
 * Author   :	Nourreddine HOUARI <nourreddine.houari@>
 * 				Koneru, Venkaiah Chowdary <VenkaiahChowdary.Koneru@> 
 *
 * Date     : 	${aDate?string.medium} 
 * 
 * File     : 	${entity.name?cap_first}Entity${dtoSuffix}TransformerImpl.java 
 * 
 * Copyright (c) ${aDate?string.yyyy} houari_nourreddine Sdn Bhd, All rights reserved.                   
 */
package ${package};

import java.util.List;
import java.util.ArrayList;

import ${entityPackage}.${entity.name?cap_first}${entity_suffix};
<#list entity.attributes as attribute>
  <#if attribute.reference>
import ${entityPackage}.${attribute.model.name?cap_first}${entity_suffix};
  </#if>
</#list>
<#list entity.relations as relation>
import ${entityPackage}.${relation.model.name?cap_first}${entity_suffix};
import ${dtoPackage}.${relation.model.name}${dtoSuffix};
</#list>
import org.springframework.stereotype.Component;
import ${dtoPackage}.${entity.name?cap_first}${dtoSuffix};
import ${package}.GenericEntity${dtoSuffix}Transformer;
<#list entity.attributes as attribute>
<#if attribute.reference>
<#if attribute.model.hasAnnotation("UDT")>
import ${entityPackage}.${attribute.type?cap_first};
import ${dtoPackage}.${attribute.type?cap_first}${dtoSuffix};
<#elseif attribute.multiplicity==1>
import ${dtoPackage}.${attribute.type}${dtoSuffix};
</#if>
</#if>
</#list>
import org.springframework.beans.factory.annotation.Autowired;

<#if hasGeometry>
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;
</#if>

/**
 * THIS FILE IS AUTOMATICALLY GENERATED
 *     >> DO NOT EDIT MANUALLY <<
 * <br><br>
 * Generated by : ${generator}<br>
 * Version      : ${version}<br>
 * Date         : ${aDate?string.medium}<br>
 * <br>
 * @author Nourreddine HOUARI <nourreddine.houari@>
 * @author Koneru, Venkaiah Chowdary <VenkaiahChowdary.Koneru@> 
 * 
 */
@Component("${entity.name?cap_first}Entity${dtoSuffix}Mapper")
public class ${entity.name?cap_first}Entity${dtoSuffix}TransformerImpl implements GenericEntity${dtoSuffix}Transformer<${entity.name?cap_first}${dtoSuffix}, ${entity.name?cap_first}${entity_suffix}> {
	
	<#assign myHash = { }>
	
	<#list entity.attributes as attribute>
	<#if attribute.reference>
	<#if !myHash[attribute.model.name]??>
   	<#assign myHash=myHash + { attribute.model.name: 0 }>
	@Autowired
	private ${attribute.model.name?cap_first}Entity${dtoSuffix}TransformerImpl ${attribute.model.name?uncap_first}Entity${dtoSuffix}Transformer;
	</#if>
	</#if>
	</#list>
	<#list entity.relations as relation>
	<#if !myHash[relation.model.name]??>
   	<#assign myHash=myHash + { relation.model.name: 0 }>
	@Autowired
	private ${relation.model.name}Entity${dtoSuffix}TransformerImpl ${relation.model.name?uncap_first}Entity${dtoSuffix}Transformer;
	</#if>
	</#list>
	
	<#if hasGeometry>
	private WKTReader wkt = new WKTReader();
	</#if>

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void transformDtoToEntity(${entity.name?cap_first}${dtoSuffix} dto, ${entity.name?cap_first}${entity_suffix} entity) {
		if(entity == null || dto == null) {
			return;
		}
		
		<#list entity.attributes as attribute>
		<#if attribute.type == "boolean">
		entity.set${attribute.name?cap_first}(dto.is${attribute.name?cap_first}());
		<#elseif attribute.type=="String" && attribute.hasAnnotation("GEOMETRY")>
		try {
			entity.set${attribute.name?cap_first}(wkt.read(dto.get${attribute.name?cap_first}()));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		<#elseif attribute.reference>
		<#if attribute.multiplicity==1>
		//One2One or Many2One (${attribute.name})
		if(dto.get${attribute.name?cap_first}() != null) {
		  if(entity.get${attribute.name?cap_first}() == null){
		  	entity.set${attribute.name?cap_first}(new ${attribute.model.name?cap_first}${entity_suffix}());
		  }	
		  ${attribute.model.name?uncap_first}Entity${dtoSuffix}Transformer.transformDtoToEntity(dto.get${attribute.name?cap_first}(),entity.get${attribute.name?cap_first}());
		}
		<#else>
		// One2Many or Many2Many (${attribute.name})
		//NOTHING TO DO
		</#if>
        <#elseif attribute.enumerate>
        entity.set${attribute.name?cap_first}(dto.get${attribute.name?cap_first}());
		<#else>
		entity.set${attribute.name?cap_first}(dto.get${attribute.name?cap_first}());
		</#if>	
		</#list>
		<#list entity.relations as relation>
		// ${relation.multiplicity} ${relation.oppositeMultiplicity}
		//if(dto.get${relation.model.name?lower_case?cap_first}_${relation.relationName?lower_case}() != null) {
		//  if(entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}() == null){
		//  	entity.set${relation.model.name?cap_first}_${relation.relationName?lower_case}(new ${relation.model.name?cap_first}${entity_suffix}());
		//  }	
		//  ${relation.model.name?uncap_first}Entity${dtoSuffix}Transformer.transformDtoToEntity(dto.get${relation.model.name?lower_case?cap_first}_${relation.relationName?lower_case}(),entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}());
		//}
		<#if relation.multiplicity == -1 && relation.oppositeMultiplicity == 1>
		// Many2One
		if(dto.get${relation.model.name?lower_case?cap_first}_${relation.relationName?lower_case}() != null) {
		  if(entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}() == null){
		  	entity.set${relation.model.name?cap_first}_${relation.relationName?lower_case}(new ${relation.model.name?cap_first}${entity_suffix}());
		  }	
		  ${relation.model.name?uncap_first}Entity${dtoSuffix}Transformer.transformDtoToEntity(dto.get${relation.model.name?lower_case?cap_first}_${relation.relationName?lower_case}(),entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}());
		}
		</#if>
		</#list>
		 <#if entity.hasAnnotation("VERSIONABLE")>
		//Set the version
		entity.setVersion(dto.getVersion());
		</#if>
		<#if entity.hasAnnotation("EXTENDABLE")>
		//Extension
        entity.setExtension(dto.getExtension());
        </#if>
        <#if entity.hasOneOfAnnotation(["AUDIT_AWARE", "SYNCH_SERVER", "SYNCH_CLIENT"])>
        entity.setCreatedBy(dto.getCreatedBy());
		entity.setCreatedDate(dto.getCreatedDate());
		</#if>
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void transformEntityToDto(${entity.name?cap_first}${entity_suffix} entity, ${entity.name?cap_first}${dtoSuffix} dto) {
		if(entity == null || dto == null) {
			return;
		}
		
		<#list entity.attributes as attribute>
		<#if attribute.type == "boolean">
		dto.set${attribute.name?cap_first}(entity.is${attribute.name?cap_first}());
		<#elseif attribute.type == "String" && attribute.hasAnnotation("GEOMETRY")>
		dto.set${attribute.name?cap_first}(entity.get${attribute.name?cap_first}().toText());
		<#elseif attribute.reference>
		  <#if attribute.multiplicity == 1>
		//One to One  
		if(entity.get${attribute.name?cap_first}() != null){
			${attribute.model.name?cap_first}${dtoSuffix} ${attribute.name?lower_case}${dtoSuffix}  = new ${attribute.model.name?cap_first}${dtoSuffix}();
			${attribute.model.name?uncap_first}Entity${dtoSuffix}Transformer.transformEntityToDto(entity.get${attribute.name?cap_first}(),${attribute.name?lower_case}${dtoSuffix});
			dto.set${attribute.name?cap_first}(${attribute.name?lower_case}${dtoSuffix});
		}
		  <#else>
		//One to Many (${attribute.name?lower_case})
		//NOTHING TO DO. Not fetching all  the children here  
		  </#if>
	    <#else>
		dto.set${attribute.name?cap_first}(entity.get${attribute.name?cap_first}());
		</#if>
		</#list>
		<#list entity.relations as relation>
		//if(entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}() != null) {
		//  ${relation.model.name?cap_first}${dtoSuffix} ${relation.relationName?lower_case}${dtoSuffix}  = new ${relation.model.name?cap_first}${dtoSuffix}();
		//  ${relation.model.name?uncap_first}Entity${dtoSuffix}Transformer.transformEntityToDto(entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}(),${relation.relationName?lower_case}${dtoSuffix});
		//  dto.set${relation.model.name?lower_case?cap_first}_${relation.relationName?lower_case}(${relation.relationName?lower_case}${dtoSuffix});	
		//}
		<#if relation.multiplicity == -1 && relation.oppositeMultiplicity == 1>
	    if(entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}() != null) {
		  ${relation.model.name?cap_first}${dtoSuffix} ${relation.relationName?lower_case}${dtoSuffix}  = new ${relation.model.name?cap_first}${dtoSuffix}();
		  ${relation.model.name?uncap_first}Entity${dtoSuffix}Transformer.transformEntityToDto(entity.get${relation.model.name?cap_first}_${relation.relationName?lower_case}(),${relation.relationName?lower_case}${dtoSuffix});
		  dto.set${relation.model.name?lower_case?cap_first}_${relation.relationName?lower_case}(${relation.relationName?lower_case}${dtoSuffix});	
		}
		</#if>
		</#list>
        <#if entity.hasAnnotation("VERSIONABLE")> 
		//Set the version
		dto.setVersion(entity.getVersion());
		</#if>
		<#if entity.hasAnnotation("EXTENDABLE")>
		//Extension
        dto.setExtension(entity.getExtension());
        </#if>
        <#if entity.hasOneOfAnnotation(["AUDIT_AWARE", "SYNCH_SERVER", "SYNCH_CLIENT"])>
        dto.setCreatedBy(entity.getCreatedBy());
		dto.setCreatedDate(entity.getCreatedDate());
		dto.setModifiedBy(entity.getModifiedBy());
		dto.setModifiedDate(entity.getModifiedDate());
		</#if>
	}
}