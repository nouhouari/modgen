/*
 * 
 * Nourreddine HOUARI CONFIDENTIAL
 * 
 * All information contained herein is, and remains
 * the property of Nourreddine HOUARI and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Nourreddine HOUARI
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Nourreddine HOUARI.
 * 
 * [2017] Nourreddine HOUARI SA
 * All Rights Reserved.
 */
 
//
// THIS FILE IS AUTOMATICALLY GENERATED
//     >> DO NOT EDIT MANUALLY <<
//
// @author Nourreddine HOUARI (nourreddine.houari@)
// Generated by : ${generator}
// Version      : ${version}
// Date         : ${today}
//

package ${package};

import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;

<#list entities as entity>
<#if entity.type == "CLASS">
import ${rolePackage}.${entity.name}Roles;
</#if>
</#list>
import com.hin.ptf.spring.boot.starter.keycloak.http.KeycloakSecurityConfigurer;

/**
 * Keycloak web security configuration bean.
 */
@Configuration
public class WebSecurityConfiguration implements KeycloakSecurityConfigurer {

  <#list entities as entity>
  <#if entity.hasAnnotation("EXTENDABLE")>
  // Extension permissions
  public static final String VIEW_EXTENSIONS_SCHEMA   = "view-schema";
  public static final String CREATE_EXTENSIONS_SCHEMA = "create-schema";
  public static final String EDIT_EXTENSIONS_SCHEMA   = "edit-schema";
  <#break>
  </#if>
  </#list>	

  @Override
  public void authorize(
    ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry authorizeRequests) {
		
	authorizeRequests
    <#list entities as entity>
    <#if entity.type == "CLASS">
    // ${entity.name}
    .antMatchers(HttpMethod.DELETE, "/${entity.name?lower_case}/*").hasAuthority(${entity.name}Roles.DELETE_${entity.name?upper_case})
    .antMatchers(HttpMethod.GET, "/${entity.name?lower_case}/read/*").hasAuthority(${entity.name}Roles.READ_${entity.name?upper_case})
    .antMatchers(HttpMethod.GET, "/${entity.name?lower_case}/list").hasAuthority(${entity.name}Roles.LIST_${entity.name?upper_case})
    .antMatchers(HttpMethod.GET, "/${entity.name?lower_case}/search").hasAuthority(${entity.name}Roles.SEARCH_${entity.name?upper_case})
    .antMatchers(HttpMethod.GET, "/${entity.name?lower_case}/quicksearch").hasAuthority(${entity.name}Roles.SEARCH_${entity.name?upper_case})
    .antMatchers(HttpMethod.GET, "/${entity.name?lower_case}/count").hasAuthority(${entity.name}Roles.COUNT_${entity.name?upper_case})
    .antMatchers(HttpMethod.POST, "/${entity.name?lower_case}/**").hasAuthority(${entity.name}Roles.SAVE_${entity.name?upper_case})
    </#if>
    </#list>
    <#list entities as entity>
    <#if entity.hasAnnotation("EXTENDABLE")>
    // Extension permissions
    .antMatchers(HttpMethod.GET, "/schema").hasAuthority(VIEW_EXTENSIONS_SCHEMA)
    .antMatchers(HttpMethod.PUT, "/schema").hasAnyAuthority(CREATE_EXTENSIONS_SCHEMA, EDIT_EXTENSIONS_SCHEMA)
    <#break>
    </#if>
    </#list>
    ;
  }
}