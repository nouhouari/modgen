<#assign aDateTime = .now>
<#assign aDate = aDateTime?date>
/*
 * Author   : Nourreddine HOUARI <nourreddine.houari@sicpa.com>
 *     Koneru, Venkaiah Chowdary <VenkaiahChowdary.Koneru@sicpa.com> 
 *
 * Date     :  ${aDate?string.medium} 
 * 
 * File     :  ${entity.name?cap_first}Service.java 
 * 
 * Copyright (c) ${aDate?string.yyyy} houari_nourreddine Sdn Bhd, All rights reserved.                   
 */
 package ${package};

import java.util.Date;
import java.util.List;

import ${entityPackage}.${entity.name?cap_first}${entity_suffix};
import ${transformerPackage}.GenericEntityProtoMapper;
<#list entity.attributes as attribute>
<#if attribute.reference>
import ${protoPackage}.${attribute.type};
<#elseif attribute.enumerate>
import ${entityPackage}.${attribute.type?cap_first};
</#if>
</#list>
<#list entity.relations as relation>
import ${protoPackage}.${relation.model.name};
</#list>  
import ${package}.GenericEntityService;
import ${protoPackage}.${entity.name?cap_first};
import ${protoPackage}.${entity.name?cap_first}SaveResult;
import ${repositoryPackage}.${entity.name?cap_first}${entity_repository_suffix};

<#function convertJavaToObjectType type>
 <#if type == "String">
   <#return "String">
 <#elseif type == "long" || type== "Long">
    <#return "Long">
 <#elseif type == "int" || type== "Integer">
    <#return "Integer">   
 </#if>
</#function> 

/**
 * THIS FILE IS AUTOMATICALLY GENERATED
 *     >> DO NOT EDIT MANUALLY <<
 * <br><br>
 * Generated by : ${generator}<br>
 * Version      : ${version}<br>
 * Date         : ${aDate?string.medium}<br>
 * <br>
 * @author Nourreddine HOUARI <nourreddine.houari@sicpa.com>
 * @author Koneru, Venkaiah Chowdary <VenkaiahChowdary.Koneru@sicpa.com>
 * 
 */
public interface ${entity.name?cap_first}Service extends GenericEntityService<${entity.name?cap_first}, ${entity.name?cap_first}${entity_suffix}> { 
 
 /**
  * Get one ${entity.name?cap_first} using the primary key(s) as param.
 <#if primaryAttributes?size gt 1>
  * @param keys Primary keys.
 <#else> 
    <#list primaryAttributes as attribute>
  * @param ${attribute.name?lower_case}
 </#list>
    </#if>
  */
  ${entity.name?cap_first} getByPrimaryKey(<#if primaryAttributes?size gt 1>Object[] keys<#else><#list primaryAttributes as attribute>${attribute.type} ${attribute.name?lower_case}<#if attribute?has_next>,</#if></#list></#if>);

  /**
   * Get one ${entity.name?cap_first} using the primary key(s) of the entity as param.
   * @param  ${entity.name?lower_case}
   */
   ${entity.name?cap_first} getOne(${entity.name?cap_first} ${entity.name?lower_case});
      
  /**
   * Delete one ${entity.name?cap_first}${entity_suffix} using the primary key(s) as param.
  <#if primaryAttributes?size gt 1>
   * @param keys Primary keys.
 <#else> 
    <#list primaryAttributes as attribute>
   * @param ${attribute.name?lower_case}
 </#list>
    </#if>
   */
  void delete(<#if primaryAttributes?size gt 1>Object[] keys<#else><#list primaryAttributes as attribute>${attribute.type} ${attribute.name?lower_case}<#if attribute?has_next>,</#if></#list></#if>);
 
  /**
   * 
    <#list primaryAttributes as attribute>
   *  @param ${attribute.name?lower_case}
   </#list>
   */
  ResultPage<${entity.name?cap_first}> queryResult(
   String sort,
   Integer offset,
   Integer size<#if entity.hasAnnotation("AUDIT_AWARE")>, String createdBy, Date createdDate, Date fromCreatedDate, Date toCreatedDate, String modifiedBy, Date modifiedDate, Date fromModifiedDate, Date toModifiedDate</#if>
   <#if searchableAttributes?size gt 0>,</#if>
   <#list searchableAttributes as attribute>
   <#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double"|| attribute.type=="Date">
   ${attribute.type} from${attribute.name?cap_first},
   ${attribute.type} to${attribute.name?cap_first},
   <#elseif attribute.type = "String" && attribute.location>
   Double ${attribute.name?lower_case}Distance, 
   </#if>
   ${attribute.type} ${attribute.name?uncap_first}<#if attribute?has_next>, </#if>
   </#list>
   <#list entity.relations as relation>
   <#list relation.model.getAttributesByAnnotation("PK") as primaryAttribute>
   ,${primaryAttribute.type} ${relation.model.name?uncap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first}
   </#list>
   </#list>
   <#list entity.attributes as attribute>
   <#if attribute.reference>
   <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
   // Query from ${primaryAttribute.type} ${attribute.name} reference.
   ,${convertJavaToObjectType(primaryAttribute.type)} ${attribute.name?uncap_first}${primaryAttribute.name?cap_first}
   </#list>
   </#if>
   </#list>);

   <#list entity.attributes as attribute>
      <#if attribute.reference>
   <#if attribute.multiplicity == 1>
  /**
   * Set relation with ${attribute.name?cap_first} instance.
   * @param proto
   * @param ${attribute.name?lower_case}
   */
  public ${entity.name?cap_first} set${attribute.name?cap_first}Relation(
        <#list entity.getAttributesByAnnotation("PK") as primaryAttribute>
        ${primaryAttribute.type} ${primaryAttribute.name},
        </#list>
        <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
        ${primaryAttribute.type} ${attribute.name}${primaryAttribute.name?cap_first}<#sep>,</#sep>
        </#list>
        );
   <#elseif attribute.multiplicity == -1>
  /**
   * Add relation with ${attribute.type?cap_first} instance.
   */      
   public ${entity.name?cap_first}SaveResult add${attribute.name?cap_first}Relation(
     <#list entity.getAttributesByAnnotation("PK") as primaryAttribute>
     ${primaryAttribute.type} ${primaryAttribute.name}${entity.name},
     </#list>
     <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
     ${primaryAttribute.type} ${primaryAttribute.name}${attribute.model.name}<#sep>,</#sep>
     </#list>);
     
  /**
   * Remove relation with ${attribute.type?cap_first} instance.
   */     
  public ${entity.name?cap_first}SaveResult remove${attribute.name?cap_first}Relation(
     <#list entity.getAttributesByAnnotation("PK") as primaryAttribute>
     ${primaryAttribute.type} ${primaryAttribute.name}${entity.name},
     </#list>
     <#list attribute.model.getAttributesByAnnotation("PK") as primaryAttribute>
     ${primaryAttribute.type} ${primaryAttribute.name}${attribute.model.name}<#sep>,</#sep>
     </#list>);
        <#else>
        // UNKOWN attribute (${attribute.name}) multiplicity = ${attribute.multiplicity}
        </#if>
   </#if>
 </#list>

  /**
   * Get all ${entity.name} entities. 
   * @Return list of ${entity.name} entities
   */  
   public List<${entity.name?cap_first}> getAll${entity.name?cap_first}s();

  /**
   * Quick search ${entity.name?cap_first}
   * @param ident
   */
   ResultPage<${entity.name?cap_first}> quickSearch(String quickSearchQuery, Integer offset, Integer size, String sort
   <#list searchableAttributes as attribute>
   <#if attribute.type=="Byte" || attribute.type=="Short"|| attribute.type=="Integer"|| attribute.type=="Long"|| attribute.type=="Float"|| attribute.type=="Double"|| attribute.type=="Date">
   ,${attribute.type} from${attribute.name?cap_first}
   ,${attribute.type} to${attribute.name?cap_first}
   <#elseif attribute.type = "String" && attribute.location>
   ,Double ${attribute.name?lower_case}Distance
   </#if>
   ,${attribute.type} ${attribute.name?uncap_first}
   </#list>
   <#list entity.relations as relation>
   <#list relation.model.getAttributesByAnnotation("PK") as primaryAttribute>
   ,${primaryAttribute.type} ${relation.model.name?uncap_first}${relation.relationName?cap_first}${primaryAttribute.name?cap_first}
   </#list>
   </#list>);
   
  /**
   * Save ${entity.name} instance. 
   * @Return ${entity.name?cap_first}SaveResult with saved ${entity.name} instance.
   */ 
  public ${entity.name?cap_first}SaveResult save(${entity.name?cap_first} ${entity.name?uncap_first});

  /**
   * Count the number of entities.
   */ 
  public long count();

  /**
   * Return the /Entity transformer.
   */
  public GenericEntityProtoMapper<${entity.name?cap_first}, ${entity.name?cap_first}${entity_suffix}> getTransformerService();
  
  /**
   * Return repository.
   * @return
   */
  public ${entity.name?cap_first}Reposit getRepository();

  /**
   * to register a new validation listener.
   *
   * @param listener ${entity.name?cap_first}ValidationListener
   */
  void register${entity.name?cap_first}ValidationListener(${entity.name?cap_first}ValidationListener listener);

  /**
   * to register a new service listener.
   *
   * @param listener ${entity.name?cap_first}ValidationListener
   */
  void register${entity.name?cap_first}ServiceListener(${entity.name?cap_first}ServiceListener listener);
   
  /**
   * Register query constraint listener.
   */
  void register${entity.name?cap_first}QueryConstraintListener(${entity.name?cap_first}QueryConstraintListener listener);

}