/*
 * 
 * Nourreddine HOUARI CONFIDENTIAL
 * 
 * All information contained herein is, and remains
 * the property of Nourreddine HOUARI and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Nourreddine HOUARI
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Nourreddine HOUARI.
 * 
 * [2017] Nourreddine HOUARI SA
 * All Rights Reserved.
 */
 
//
// THIS FILE IS AUTOMATICALLY GENERATED
//     >> DO NOT EDIT MANUALLY <<
//
// @author Nourreddine HOUARI (nourreddine.houari@)
// Generated by : Protobuf generator.
// Version      : 0.0.1
// Date         : Wed Jul 14 15:37:36 MYT 2021
//
syntax = "proto3";

package com.hin.modgen.horizon.inspection.api.rpc;

option java_multiple_files = true;
option java_package = "com.hin.modgen.horizon.inspection";
option java_outer_classname = "ModelProtoBuf";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

import "com/hin/modgen/horizon/inspection/api/rpc/Page.proto";



 //////////////////
 // Campaign
 //////////////////

  // Define Campaign message
  message Campaign {
	// String id
	string id = 1;
	// String name
	string name = 2;
	// Date fromDate
	int64 fromDate = 3;
	// Date toDate
	int64 toDate = 4;
	// String description
	string description = 5;
	// Inspection inspection
	// Inspection inspection
	repeated Inspection inspection = 6;
    
    
  }
  
  
  /*
   * Result save response with status and validation map.
   */
  message CampaignSaveResult {
    enum CampaignSaveStatusEnum {
      SUCCESS = 0;
      FAILURE = 1;
      EXCEPTION = 3;
    }
    CampaignSaveStatusEnum status = 1; // one of the enums from the above status. Default is SUCCESS.
    Campaign entityProto = 2; // request object that is received
    map<string, string> errors = 3; // a key-value pair of errors with property names as keys and corresponding error codes as values.
  }

  /*
   * Define the query parameters for a Campaign
   * entity.
   */
  message CampaignQuery {
     string sortParams = 1;
     string name = 2;
     // Query from String inspection reference.
     string inspectionId = 3;
  }
  
  /*
   * Define the quick query for a Campaign
   * entity.
   */
  message CampaignQuickSearchQuery {
    string quickSearchQuery = 1;
    string sortParams = 2;
     string name = 3;
  }
  
  /*
   * Campaign result page that contains the result of 
   * a request.
   */
  message CampaignResultPage{
    // Amount of elements
    uint32 totalElements  = 1;
    // Number of current page
    uint32 number  = 2;
    // Number of elements in the current page
    uint64 numberOfElements = 3;
    // Page size
    uint64 size = 4;
    // Total number of pages
    uint64 totalPages = 5;
    // Element list
    repeated Campaign entities = 6;
  }
  
  /*
   * Request that contains the pagination information and
   * the query parameters.
   */
   message CampaignRequest {
     Page page = 1;
     CampaignQuery query = 2;
   }
   
  /*
   * Request that contains the pagination information and
   * the query parameters for a quick search.
   */
   message CampaignQuickSearchRequest {
     Page page = 1;
     CampaignQuickSearchQuery query = 2;
   }
     
   /*
    * Entities list
    */ 
   message CampaignList {
    repeated Campaign entities = 1;
   }
   
   /*
    * Message to request a link between Campaign and a inspection of type  Inspection
    */   
   message LinkCampaignToInspectionRequest {
     string id = 1;
     string inspection_id = 2;
   }
   
   /*
    * Message to create alink a Campaign and a inspection of type  Inspection
    */   
   message AddLinkCampaignToInspectionRequest {
     // link : true for add
     // link : false for remove
     bool link = 1;
     string id = 2;
     string inspection_id = 3;
   }      
    

  // CRUD and Search services
  service CampaignCRUDServices{
    
    // Create Campaign
    // @param  : campaign to create.
    // @return : the created campaign or ALREADY_EXISTS
    rpc SaveCampaign(Campaign) returns (CampaignSaveResult);

    // Read Campaign by id
    // @param  : campaign id to read.
    // @return : the campaign or NOT_FOUND
    rpc ReadCampaign(google.protobuf.StringValue) returns (Campaign);
    
    // Update Campaign
    // @param  : campaign to update.
    // @return : the updated campaign or NOT_FOUND
    rpc UpdateCampaign (Campaign) returns (Campaign);
    
    // Delete Campaign by id
    // @param  : campaign id to delete.
    // @return : empty message or NOT_FOUND
    rpc DeleteCampaign(google.protobuf.StringValue) returns (google.protobuf.Empty);
    
    // Get all Campaign 
    // @param  : CampaignRequest search request.
    // @return : list of Campaign
    rpc GetAllCampaign(CampaignRequest) returns (CampaignResultPage);
    
    // Get all entities
    // @param : No param
    // @return : list of Campaign
    rpc GetAllCampaigns(google.protobuf.Empty) returns (CampaignList);
    
    // Quick search Campaign 
    // @param  : CampaignQuickSearchRequest quick search request.
    // @return : list of Campaign that match the query
    rpc QuickSearchCampaign(CampaignQuickSearchRequest) returns (CampaignResultPage);
    
    // Count entities
    // @param : No param
    // @return : number of Campaign
    rpc CountCampaign(google.protobuf.Empty) returns (google.protobuf.Int64Value);
    
      // -1
    // Add Inspection to Inspection list
    // @param : LinkInspectionRequest
    // @return : empty
    rpc AddInspection(LinkCampaignToInspectionRequest) returns (CampaignSaveResult);
    
    // Remove Inspection from Inspection list
    // @param : LinkInspectionRequest
    // @return : empty
    rpc RemoveInspection(LinkCampaignToInspectionRequest) returns (CampaignSaveResult);
    
  }
  

 //////////////////
 // Inspection
 //////////////////

  // Define Inspection message
  message Inspection {
	// String id
	string id = 1;
	// Date date
	int64 date = 2;
    
    
  }
  
  
  /*
   * Result save response with status and validation map.
   */
  message InspectionSaveResult {
    enum InspectionSaveStatusEnum {
      SUCCESS = 0;
      FAILURE = 1;
      EXCEPTION = 3;
    }
    InspectionSaveStatusEnum status = 1; // one of the enums from the above status. Default is SUCCESS.
    Inspection entityProto = 2; // request object that is received
    map<string, string> errors = 3; // a key-value pair of errors with property names as keys and corresponding error codes as values.
  }

  /*
   * Define the query parameters for a Inspection
   * entity.
   */
  message InspectionQuery {
     string sortParams = 1;
     string campaignInspectionId = 2;
  }
  
  /*
   * Define the quick query for a Inspection
   * entity.
   */
  message InspectionQuickSearchQuery {
    string quickSearchQuery = 1;
    string sortParams = 2;
     string campaignInspectionId = 3;
  }
  
  /*
   * Inspection result page that contains the result of 
   * a request.
   */
  message InspectionResultPage{
    // Amount of elements
    uint32 totalElements  = 1;
    // Number of current page
    uint32 number  = 2;
    // Number of elements in the current page
    uint64 numberOfElements = 3;
    // Page size
    uint64 size = 4;
    // Total number of pages
    uint64 totalPages = 5;
    // Element list
    repeated Inspection entities = 6;
  }
  
  /*
   * Request that contains the pagination information and
   * the query parameters.
   */
   message InspectionRequest {
     Page page = 1;
     InspectionQuery query = 2;
   }
   
  /*
   * Request that contains the pagination information and
   * the query parameters for a quick search.
   */
   message InspectionQuickSearchRequest {
     Page page = 1;
     InspectionQuickSearchQuery query = 2;
   }
     
   /*
    * Entities list
    */ 
   message InspectionList {
    repeated Inspection entities = 1;
   }
   
    
   /* 
    * Find by Campaign request. 
    */
   message InspectionByCampaignInspectionRequest {
     Page page = 1;
     string id = 2;    
   }

  // CRUD and Search services
  service InspectionCRUDServices{
    
    // Create Inspection
    // @param  : inspection to create.
    // @return : the created inspection or ALREADY_EXISTS
    rpc SaveInspection(Inspection) returns (InspectionSaveResult);

    // Read Inspection by id
    // @param  : inspection id to read.
    // @return : the inspection or NOT_FOUND
    rpc ReadInspection(google.protobuf.StringValue) returns (Inspection);
    
    // Update Inspection
    // @param  : inspection to update.
    // @return : the updated inspection or NOT_FOUND
    rpc UpdateInspection (Inspection) returns (Inspection);
    
    // Delete Inspection by id
    // @param  : inspection id to delete.
    // @return : empty message or NOT_FOUND
    rpc DeleteInspection(google.protobuf.StringValue) returns (google.protobuf.Empty);
    
    // Get all Inspection 
    // @param  : InspectionRequest search request.
    // @return : list of Inspection
    rpc GetAllInspection(InspectionRequest) returns (InspectionResultPage);
    
    // Get all entities
    // @param : No param
    // @return : list of Inspection
    rpc GetAllInspections(google.protobuf.Empty) returns (InspectionList);
    
    // Quick search Inspection 
    // @param  : InspectionQuickSearchRequest quick search request.
    // @return : list of Inspection that match the query
    rpc QuickSearchInspection(InspectionQuickSearchRequest) returns (InspectionResultPage);
    
    // Count entities
    // @param : No param
    // @return : number of Inspection
    rpc CountInspection(google.protobuf.Empty) returns (google.protobuf.Int64Value);
    
  }
  

 //////////////////
 // Inspector
 //////////////////

  // Define Inspector message
  message Inspector {
	// String id
	string id = 1;
	// String name
	string name = 2;
    
    
  }
  
  
  /*
   * Result save response with status and validation map.
   */
  message InspectorSaveResult {
    enum InspectorSaveStatusEnum {
      SUCCESS = 0;
      FAILURE = 1;
      EXCEPTION = 3;
    }
    InspectorSaveStatusEnum status = 1; // one of the enums from the above status. Default is SUCCESS.
    Inspector entityProto = 2; // request object that is received
    map<string, string> errors = 3; // a key-value pair of errors with property names as keys and corresponding error codes as values.
  }

  /*
   * Define the query parameters for a Inspector
   * entity.
   */
  message InspectorQuery {
     string sortParams = 1;
  }
  
  /*
   * Define the quick query for a Inspector
   * entity.
   */
  message InspectorQuickSearchQuery {
    string quickSearchQuery = 1;
    string sortParams = 2;
  }
  
  /*
   * Inspector result page that contains the result of 
   * a request.
   */
  message InspectorResultPage{
    // Amount of elements
    uint32 totalElements  = 1;
    // Number of current page
    uint32 number  = 2;
    // Number of elements in the current page
    uint64 numberOfElements = 3;
    // Page size
    uint64 size = 4;
    // Total number of pages
    uint64 totalPages = 5;
    // Element list
    repeated Inspector entities = 6;
  }
  
  /*
   * Request that contains the pagination information and
   * the query parameters.
   */
   message InspectorRequest {
     Page page = 1;
     InspectorQuery query = 2;
   }
   
  /*
   * Request that contains the pagination information and
   * the query parameters for a quick search.
   */
   message InspectorQuickSearchRequest {
     Page page = 1;
     InspectorQuickSearchQuery query = 2;
   }
     
   /*
    * Entities list
    */ 
   message InspectorList {
    repeated Inspector entities = 1;
   }
   
    

  // CRUD and Search services
  service InspectorCRUDServices{
    
    // Create Inspector
    // @param  : inspector to create.
    // @return : the created inspector or ALREADY_EXISTS
    rpc SaveInspector(Inspector) returns (InspectorSaveResult);

    // Read Inspector by id
    // @param  : inspector id to read.
    // @return : the inspector or NOT_FOUND
    rpc ReadInspector(google.protobuf.StringValue) returns (Inspector);
    
    // Update Inspector
    // @param  : inspector to update.
    // @return : the updated inspector or NOT_FOUND
    rpc UpdateInspector (Inspector) returns (Inspector);
    
    // Delete Inspector by id
    // @param  : inspector id to delete.
    // @return : empty message or NOT_FOUND
    rpc DeleteInspector(google.protobuf.StringValue) returns (google.protobuf.Empty);
    
    // Get all Inspector 
    // @param  : InspectorRequest search request.
    // @return : list of Inspector
    rpc GetAllInspector(InspectorRequest) returns (InspectorResultPage);
    
    // Get all entities
    // @param : No param
    // @return : list of Inspector
    rpc GetAllInspectors(google.protobuf.Empty) returns (InspectorList);
    
    // Quick search Inspector 
    // @param  : InspectorQuickSearchRequest quick search request.
    // @return : list of Inspector that match the query
    rpc QuickSearchInspector(InspectorQuickSearchRequest) returns (InspectorResultPage);
    
    // Count entities
    // @param : No param
    // @return : number of Inspector
    rpc CountInspector(google.protobuf.Empty) returns (google.protobuf.Int64Value);
    
  }
  

 //////////////////
 // Team
 //////////////////

  // Define Team message
  message Team {
	// String id
	string id = 1;
	// String name
	string name = 2;
    
    
  }
  
  
  /*
   * Result save response with status and validation map.
   */
  message TeamSaveResult {
    enum TeamSaveStatusEnum {
      SUCCESS = 0;
      FAILURE = 1;
      EXCEPTION = 3;
    }
    TeamSaveStatusEnum status = 1; // one of the enums from the above status. Default is SUCCESS.
    Team entityProto = 2; // request object that is received
    map<string, string> errors = 3; // a key-value pair of errors with property names as keys and corresponding error codes as values.
  }

  /*
   * Define the query parameters for a Team
   * entity.
   */
  message TeamQuery {
     string sortParams = 1;
  }
  
  /*
   * Define the quick query for a Team
   * entity.
   */
  message TeamQuickSearchQuery {
    string quickSearchQuery = 1;
    string sortParams = 2;
  }
  
  /*
   * Team result page that contains the result of 
   * a request.
   */
  message TeamResultPage{
    // Amount of elements
    uint32 totalElements  = 1;
    // Number of current page
    uint32 number  = 2;
    // Number of elements in the current page
    uint64 numberOfElements = 3;
    // Page size
    uint64 size = 4;
    // Total number of pages
    uint64 totalPages = 5;
    // Element list
    repeated Team entities = 6;
  }
  
  /*
   * Request that contains the pagination information and
   * the query parameters.
   */
   message TeamRequest {
     Page page = 1;
     TeamQuery query = 2;
   }
   
  /*
   * Request that contains the pagination information and
   * the query parameters for a quick search.
   */
   message TeamQuickSearchRequest {
     Page page = 1;
     TeamQuickSearchQuery query = 2;
   }
     
   /*
    * Entities list
    */ 
   message TeamList {
    repeated Team entities = 1;
   }
   
    

  // CRUD and Search services
  service TeamCRUDServices{
    
    // Create Team
    // @param  : team to create.
    // @return : the created team or ALREADY_EXISTS
    rpc SaveTeam(Team) returns (TeamSaveResult);

    // Read Team by id
    // @param  : team id to read.
    // @return : the team or NOT_FOUND
    rpc ReadTeam(google.protobuf.StringValue) returns (Team);
    
    // Update Team
    // @param  : team to update.
    // @return : the updated team or NOT_FOUND
    rpc UpdateTeam (Team) returns (Team);
    
    // Delete Team by id
    // @param  : team id to delete.
    // @return : empty message or NOT_FOUND
    rpc DeleteTeam(google.protobuf.StringValue) returns (google.protobuf.Empty);
    
    // Get all Team 
    // @param  : TeamRequest search request.
    // @return : list of Team
    rpc GetAllTeam(TeamRequest) returns (TeamResultPage);
    
    // Get all entities
    // @param : No param
    // @return : list of Team
    rpc GetAllTeams(google.protobuf.Empty) returns (TeamList);
    
    // Quick search Team 
    // @param  : TeamQuickSearchRequest quick search request.
    // @return : list of Team that match the query
    rpc QuickSearchTeam(TeamQuickSearchRequest) returns (TeamResultPage);
    
    // Count entities
    // @param : No param
    // @return : number of Team
    rpc CountTeam(google.protobuf.Empty) returns (google.protobuf.Int64Value);
    
  }
  

 //////////////////
 // Business
 //////////////////

  // Define Business message
  message Business {
	// String id
	string id = 1;
	// String name
	string name = 2;
    
    
  }
  
  
  /*
   * Result save response with status and validation map.
   */
  message BusinessSaveResult {
    enum BusinessSaveStatusEnum {
      SUCCESS = 0;
      FAILURE = 1;
      EXCEPTION = 3;
    }
    BusinessSaveStatusEnum status = 1; // one of the enums from the above status. Default is SUCCESS.
    Business entityProto = 2; // request object that is received
    map<string, string> errors = 3; // a key-value pair of errors with property names as keys and corresponding error codes as values.
  }

  /*
   * Define the query parameters for a Business
   * entity.
   */
  message BusinessQuery {
     string sortParams = 1;
  }
  
  /*
   * Define the quick query for a Business
   * entity.
   */
  message BusinessQuickSearchQuery {
    string quickSearchQuery = 1;
    string sortParams = 2;
  }
  
  /*
   * Business result page that contains the result of 
   * a request.
   */
  message BusinessResultPage{
    // Amount of elements
    uint32 totalElements  = 1;
    // Number of current page
    uint32 number  = 2;
    // Number of elements in the current page
    uint64 numberOfElements = 3;
    // Page size
    uint64 size = 4;
    // Total number of pages
    uint64 totalPages = 5;
    // Element list
    repeated Business entities = 6;
  }
  
  /*
   * Request that contains the pagination information and
   * the query parameters.
   */
   message BusinessRequest {
     Page page = 1;
     BusinessQuery query = 2;
   }
   
  /*
   * Request that contains the pagination information and
   * the query parameters for a quick search.
   */
   message BusinessQuickSearchRequest {
     Page page = 1;
     BusinessQuickSearchQuery query = 2;
   }
     
   /*
    * Entities list
    */ 
   message BusinessList {
    repeated Business entities = 1;
   }
   
    

  // CRUD and Search services
  service BusinessCRUDServices{
    
    // Create Business
    // @param  : business to create.
    // @return : the created business or ALREADY_EXISTS
    rpc SaveBusiness(Business) returns (BusinessSaveResult);

    // Read Business by id
    // @param  : business id to read.
    // @return : the business or NOT_FOUND
    rpc ReadBusiness(google.protobuf.StringValue) returns (Business);
    
    // Update Business
    // @param  : business to update.
    // @return : the updated business or NOT_FOUND
    rpc UpdateBusiness (Business) returns (Business);
    
    // Delete Business by id
    // @param  : business id to delete.
    // @return : empty message or NOT_FOUND
    rpc DeleteBusiness(google.protobuf.StringValue) returns (google.protobuf.Empty);
    
    // Get all Business 
    // @param  : BusinessRequest search request.
    // @return : list of Business
    rpc GetAllBusiness(BusinessRequest) returns (BusinessResultPage);
    
    // Get all entities
    // @param : No param
    // @return : list of Business
    rpc GetAllBusinesss(google.protobuf.Empty) returns (BusinessList);
    
    // Quick search Business 
    // @param  : BusinessQuickSearchRequest quick search request.
    // @return : list of Business that match the query
    rpc QuickSearchBusiness(BusinessQuickSearchRequest) returns (BusinessResultPage);
    
    // Count entities
    // @param : No param
    // @return : number of Business
    rpc CountBusiness(google.protobuf.Empty) returns (google.protobuf.Int64Value);
    
  }
  
